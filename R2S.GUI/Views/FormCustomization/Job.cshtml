@model JobFieldViewModel
@{
    ViewBag.Title = "Customize Job Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>Create and customize job application form</h3>

<style>
    body { font-size: 14px; }

    .activeDroppable { background-color: #eeffee; }

    .hoverDroppable { background-color: lightgreen; }

    .draggableField { /* float: left; */ }

    .draggableField > input, select, button, .checkboxgroup, .selectmultiple, .radiogroup {
        margin-top: 10px;
        margin-right: 10px;
        margin-bottom: 10px;
    }

    /*.draggableField:hover{
      background-color: #ccffcc;
    }*/

    .control-label { width: 100px; }

    .selectorField .textbox b, .selectorField .password b, .selectorField .combobox b, .selectorField .radiogroup b, .selectorField .checkboxgroup b, .selectorField .selectmultiple b,
    .selectorField .displaydate b, .selectorField .displaytext b {
        position: relative;
        top: 3px;
        left: 0px;
        width: 18px;
        height: 16px;
        display: inline-block;
        background-image: url("@Url.Content("~/Content/Images/sprite.png")");
        background-repeat: no-repeat;
    }

    .selectorField .textbox b, .selectorField .password b, .selectorField .displaytext b { background-position: -10px -549px; }

    .selectorField .combobox b { background-position: -10px -722px; }

    .selectorField .radiogroup b { background-position: -10px -619px; }

    .selectorField .checkboxgroup b { background-position: -10px -688px; }

    .selectorField .selectmultiple b { background-position: -10px -1082px; }

    .selectorField .displaydate b { background-position: -10px -975px; }

    .well-mini {
        margin: 4px;
        padding: 2px;

        cursor: pointer;
    }

    .draggableField:hover .well-mini { background-color: rgb(243, 243, 243); }

    .modele { display: none; }
</style>
<style id="content-styles">
    /* Styles that are also copied for Preview */
    body {
        margin: 10px 0 0 10px;
    }

    .control-label {
        display: inline-block !important;
        padding-top: 5px;
        text-align: right;
        vertical-align: baseline;
        padding-right: 10px;
    }

    .droppedField {
        padding-left: 5px;
    }

        .droppedField > input, select, button, .checkboxgroup, .selectmultiple, .radiogroup {
            margin-top: 10px;
            margin-right: 10px;
            margin-bottom: 10px;
        }

    .action-bar .droppedField {
        float: left;
        padding-left: 5px;
    }
</style>
<script>
        /* Make the control draggable */
        function makeDraggable() {
            $(".selectorField").draggable({ helper: "clone", stack: "div", cursor: "move", cancel: null });
        }

        var _ctrl_index = 1001;

        function docReady() {
            console.log("document ready");
            compileTemplates();

            makeDraggable();

            $(".droppedFields")
                .droppable({
                    activeClass: "activeDroppable",
                    hoverClass: "hoverDroppable",
                    accept: ":not(.ui-sortable-helper)",
                    drop: function (event, ui) {
                        //console.log(event, ui);
                        var draggable = ui.draggable;
                        draggable = $(ui.draggable).find(".modele").clone();
                        // draggable = draggable.clone();
                        draggable.removeClass("modele");
                        draggable.removeClass("selectorField");
                        draggable.addClass("droppedField");
                        draggable[0].id = "CTRL-DIV-" + (_ctrl_index++); // Attach an ID to the rendered control
                        draggable.appendTo(this);

                        /* Once dropped, attach the customization handler to the control */
                        draggable.click(function () {
                            // The following assumes that dropped fields will have a ctrl-defined.
                            //   If not required, code needs to handle exceptions here.
                            var me = $(this)
                            var ctrl = me.find("[class*=ctrl]")[0];
                            var ctrl_type = $.trim(ctrl.className.match("ctrl-.*")[0].split(" ")[0].split("-")[1]);
                            customize_ctrl(ctrl_type, this.id);
                            //window["customize_"+ctrl_type](this.id);
                        });

                        makeDraggable();
                    }
                });

            /* Make the droppedFields sortable and connected with other droppedFields containers*/
            $(".droppedFields")
                .sortable({
                    cancel: null, // Cancel the default events on the controls
                    connectWith: ".droppedFields"
                })
                .disableSelection();


            // Affichage du div pour la suppression d'un tableau
            $("#divDeleteTableau").hide();
            $('.droppedFields')
                .mouseenter(function () {
                    tableauToDelete = this;
                    $("#divDeleteTableau").show();
                    $("#divDeleteTableau")
                        .position({
                            my: "right top",
                            at: "right top",
                            of: $(this).parent().children().last()
                        });
                });
            $('.droppedFields')
                .mouseleave(function () {
                    $("#divDeleteTableau").hide();
                });
            $('#divDeleteTableau')
                .mouseenter(function () {
                    $("#divDeleteTableau").show();
                });

            $("#sliderNbColonne")
                .slider({
                    min: 1,
                    max: 4,
                    value: 1,
                    slide: function (event, ui) {
                        $("#nbColonne").html(ui.value);
                    }
                });
            $("#nbColonne").html($("#sliderNbColonne").slider("value"));


            // Permet le trie des "tableaux"
            $("#selected-content")
                .sortable({
                    cancel: null,
                    start: function (event, ui) {
                        $("#divDeleteTableau").hide();
                    }
                })
                .disableSelection();
        }


        // Ajout de tableau
        function ajouterTableau() {
            var bValid = true;
            if (bValid) {
                var nbColonne = $("#sliderNbColonne").slider("value");
                var contentToAdd = "<div class=\"row-fluid\">";
                var largeurSpan = 12 / nbColonne;
                for (var i = 0; i < nbColonne; i++) {
                    contentToAdd += "<div class=\"span" + largeurSpan + " well droppedFields\"></div>";
                }
                contentToAdd += "</div>";
                $('#dialog-form-nombre-colonne').modal('hide');
                $("#selected-content").append(contentToAdd);
                docReady();
            }
        }

        // Suppression de tableau
        var tableauToDelete = null;

        function supprimerTableau() {
            if (tableauToDelete) {
                if (window.confirm("Etes-vous certain ?")) {
                    $("body").append($("#divDeleteTableau")); // Sinon il r�apparait ...
                    $(tableauToDelete).parent().remove();
                    tableauToDelete = null;
                    $("#divDeleteTableau").hide();
                }
            }
        }


        /*
          Preview the customized form
            -- Opens a new window and renders html content there.
        */
        function preview() {
            console.log('Preview clicked');

            // Sample preview - opens in a new window by copying content -- use something better in production code
            var selected_content = $("#selected-content").clone();
            selected_content.find("div")
                .each(function (i, o) {
                    var obj = $(o)
                    obj.removeClass("draggableField ui-draggable well ui-droppable ui-sortable");
                });

            selected_content.find("#form-title-div").remove();

            var selected_content_html = selected_content.html();

            var dialogContent = '<!DOCTYPE HTML>\n<html lang="en-US">\n<head>\n<meta charset="UTF-8">\n<title></title>\n';
            dialogContent += '<link href="bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen">\n';
            dialogContent += '<style>\n' + $("#content-styles").html() + '\n</style>\n';
            dialogContent += '</head>\n<body>';

            dialogContent += selected_content_html;
            dialogContent += '\n</body></html>';

            dialogContent += '<br/><br/><b>Source code: </b><pre>' + $('<div/>').text(dialogContent).html();
            +'</pre>\n\n';

            dialogContent = dialogContent.replace('\n</body></html>', '');
            dialogContent += '\n</body></html>';


            var win = window.open("about:blank");
            win.document.write(dialogContent);
        }

        if (typeof (console) == 'undefined' || console == null) {
            console = {};
            console.log = function () { }
        }

        function closeModal() {
            $("#modal1").hide();
            $("#modal1").closeModal();
        };
        /* Delete the control from the form */
        function delete_ctrl() {
            if (window.confirm("Etes-vous certain ?")) {
                var ctrl_id = $("#theForm").find("[name=forCtrl]").val()
                console.log(ctrl_id);
                $("#" + ctrl_id).remove();
                closeModal();

            }
        }

        /* Compile the templates for use */
        function compileTemplates() {
            window.templates = {};
            window.templates.common = Handlebars.compile($("#control-customize-template").html());

            /* HTML Templates required for specific implementations mentioned below */

            // Mostly we donot need so many templates
            window.templates.textbox = Handlebars.compile($("#textbox-template").html());
            window.templates.passwordbox = Handlebars.compile($("#textbox-template").html());
            window.templates.combobox = Handlebars.compile($("#combobox-template").html());
            window.templates.selectmultiplelist = Handlebars.compile($("#combobox-template").html());
            window.templates.radiogroup = Handlebars.compile($("#combobox-template").html());
            window.templates.checkboxgroup = Handlebars.compile($("#combobox-template").html());
            window.templates.text = Handlebars.compile($("#text-template").html());
            window.templates.date = Handlebars.compile($("#date-template").html());
        }

        // Object containing specific "Save Changes" method
        save_changes = {};

        // Object comaining specific "Load Values" method.
        load_values = {};

        /* Common method for all controls with Label and Name */
        load_values.common = function (ctrl_type, ctrl_id) {
            var form = $("#theForm");
            var div_ctrl = $("#" + ctrl_id);

            // Gestion du champs obligatoire
            var listeHiddenObligatoire = div_ctrl.find(".hiddenObligatoire");
            if (listeHiddenObligatoire != null && listeHiddenObligatoire.length > 0) {
                var ctrlObligatoire = listeHiddenObligatoire[0];
                form.find("[name=obligatoire]").attr('checked', ctrlObligatoire.value == "true");
                form.find("#pObligatoire").show();
            } else {
                form.find("#pObligatoire").hide();
            }
            // Gestion du chargement champs sp�cifiques
            form.find("[name=label]").val(div_ctrl.find('.control-label').text())
            var specific_load_method = load_values[ctrl_type];
            if (typeof (specific_load_method) != 'undefined') {
                specific_load_method(ctrl_type, ctrl_id);
            }
        }

        /* Specific method to load values from a textbox control to the customizationcustomization_modal dialog */
        load_values.textbox = function (ctrl_type, ctrl_id) {
            var form = $("#theForm");
            var div_ctrl = $("#" + ctrl_id);
            var ctrlText = div_ctrl.find("input[type=text]")[0];
            form.find("[name=name]").val(ctrlText.name);
            form.find("[name=placeholder]").val(ctrlText.placeholder);
        }

        // Passwordbox uses the same functionality as textbox - so just point to that
        load_values.passwordbox = load_values.textbox;

        /* Specific method to load values from a combobox control to the customization dialog  */
        load_values.combobox = function (ctrl_type, ctrl_id) {
            var form = $("#theForm");
            var div_ctrl = $("#" + ctrl_id);
            var ctrl = div_ctrl.find("select")[0];
            form.find("[name=name]").val(ctrl.name)
            var options = '';
            $(ctrl).find('option').each(function (i, o) { options += o.text + '\n'; });
            form.find("[name=options]").val($.trim(options));
        }
        // Multi-select combobox has same customization features
        load_values.selectmultiplelist = load_values.combobox;

        /* Specific method to load values from a radio group */
        load_values.radiogroup = function (ctrl_type, ctrl_id) {
            var form = $("#theForm");
            var div_ctrl = $("#" + ctrl_id);
            var options = '';
            var ctrls = div_ctrl.find("div").find("span");
            var radios = div_ctrl.find("div").find("input");

            ctrls.each(function (i, o) { options += $(o).text() + '\n'; });
            form.find("[name=name]").val(radios[0].name);
            form.find("[name=options]").val($.trim(options));
        }

        // Checkbox group  customization behaves same as radio group
        load_values.checkboxgroup = load_values.radiogroup;

        /* Specific method to load values from a button */
        load_values.btn = function (ctrl_type, ctrl_id) {
            var form = $("#theForm");
            var div_ctrl = $("#" + ctrl_id);
            var ctrl = div_ctrl.find("button")[0];
            form.find("[name=name]").val(ctrl.name)
            form.find("[name=label]").val($(ctrl).text().trim())
        }

        /* Specific method to load values from a text to the customization dialog */
        load_values.text = function (ctrl_type, ctrl_id) {
            var form = $("#theForm");
            var div_ctrl = $("#" + ctrl_id);
            var ctrlText = div_ctrl.find(".ctrl-text");
            form.find("[name=texte]").val(ctrlText.text());
        }

        /* Specific method to load values from a date to the customization dialog */
        load_values.date = function (ctrl_type, ctrl_id) {
            var form = $("#theForm");
            var div_ctrl = $("#" + ctrl_id);
            var ctrlText = div_ctrl.find(".ctrl-date");
            form.find("[name=dateformat]").val(ctrlText.text());
        }


        /* Common method to save changes to a control  - This also calls the specific methods */
        save_changes.common = function (values) {
            var div_ctrl = $("#" + values.forCtrl);
            div_ctrl.find('.control-label').text(values.label);

            // Gestion du champs obligatoire
            var listeHiddenObligatoire = div_ctrl.find(".hiddenObligatoire");
            if (listeHiddenObligatoire != null && listeHiddenObligatoire.length > 0) {
                var ctrlObligatoire = listeHiddenObligatoire[0];
                ctrlObligatoire.value = values.obligatoire;
            }

            var specific_save_method = save_changes[values.type];
            if (typeof (specific_save_method) != 'undefined') {
                specific_save_method(values);
            }
        }

        /* Specific method to save changes to a text box */
        save_changes.textbox = function (values) {
            var div_ctrl = $("#" + values.forCtrl);
            var ctrlText = div_ctrl.find("input[type=text]")[0];
            // var ctrl = div_ctrl.find("input")[0];
            ctrlText.placeholder = values.placeholder;
            ctrlText.name = values.name;
            // console.log(values.obligatoire);
        }

        // Password box customization behaves same as textbox
        save_changes.passwordbox = save_changes.textbox;

        /* Specific method to save changes to a combobox */
        save_changes.combobox = function (values) {
            console.log(values);
            var div_ctrl = $("#" + values.forCtrl);
            var ctrl = div_ctrl.find("select")[0];
            ctrl.name = values.name;
            $(ctrl).empty();
            $(values.options.split('\n'))
                .each(function (i, o) {
                    $(ctrl).append("<option>" + $.trim(o) + "</option>");
                });
        }

        /* Specific method to save a radiogroup */
        save_changes.radiogroup = function (values) {
            var div_ctrl = $("#" + values.forCtrl);

            var label_template = $(".selectorField .ctrl-radiogroup span")[0];
            var radio_template = $(".selectorField .ctrl-radiogroup input")[0];
            var ctrl = div_ctrl.find(".ctrl-radiogroup");
            ctrl.empty();
            $(values.options.split('\n'))
                .each(function (i, o) {
                    var label = $(label_template).clone().text($.trim(o));
                    tmpLabel = label[0].innerText;
                    label[0].innerText = "";
                    var radio = $(radio_template).clone();
                    radio[0].name = values.name;
                    radio[0].id = values.name + i;

                    label.prepend("<label for='" + radio[0].id + "'>" + tmpLabel + "</label>");
                    label.prepend(radio);

                    $(ctrl).append(label);
                });
        }

        /* Same as radio group, but separated for simplicity */
        save_changes.checkboxgroup = function (values) {
            var div_ctrl = $("#" + values.forCtrl);

            var label_template = $(".selectorField .ctrl-checkboxgroup span")[0];
            var checkbox_template = $(".selectorField .ctrl-checkboxgroup input")[0];

            var ctrl = div_ctrl.find(".ctrl-checkboxgroup");
            ctrl.empty();
            $(values.options.split('\n'))
                .each(function (i, o) {
                    var label = $(label_template).clone().text($.trim(o));
                    tmpLabel = label[0].innerText;
                    label[0].innerText = "";
                    var checkbox = $(checkbox_template).clone();
                    checkbox[0].name = values.name;
                    checkbox[0].id = values.name + i;

                    label.prepend("<label for='" + label[0].id + "'>" + tmpLabel + "</label>");
                    label.prepend(checkbox);
                    $(ctrl).append(label);
                });
        }

        // Multi-select customization behaves same as combobox
        save_changes.selectmultiplelist = save_changes.combobox;

        /* Specific method for Button */
        save_changes.btn = function (values) {
            var div_ctrl = $("#" + values.forCtrl);
            var ctrl = div_ctrl.find("button")[0];
            $(ctrl).html($(ctrl).html().replace($(ctrl).text(), " " + $.trim(values.label)));
            ctrl.name = values.name;
            //console.log(values);
        }

        /* Specific method to save changes to a text box */
        save_changes.text = function (values) {
            save_changes_simple_text(values, ".ctrl-text", values.texte)
        }

        /* Specific method to save changes to a text box */
        save_changes.date = function (values) {
            save_changes_simple_text(values, ".ctrl-date", values.dateformat)
        }

        function save_changes_simple_text(values, ctrl, value) {
            var div_ctrl = $("#" + values.forCtrl);
            var ctrlText = div_ctrl.find(ctrl);
            ctrlText.text(value);
        }

        /* Save the changes due to customization
          - This method collects the values and passes it to the save_changes.methods
        */
        function save_customize_changes(e, obj) {
            //console.log('save clicked', arguments);
            var formValues = {};
            var val = null;
            $("#theForm")
                .find("input, textarea, select")
                .each(function (i, o) {
                    if (o.type == "checkbox") {
                        val = o.checked;
                    } else {
                        val = o.value;
                    }
                    formValues[o.name] = val;
                });

            save_changes.common(formValues);
            closeModal();
        }

        /*
          Opens the customization window for this
        */
        function customize_ctrl(ctrl_type, ctrl_id) {
            console.log(ctrl_type);
            var ctrl_params = {};

            /* Load the specific templates */
            var specific_template = templates[ctrl_type];
            if (typeof (specific_template) == 'undefined') {
                specific_template = function () { return ''; };
            }
            var modal_header = $("#" + ctrl_id).find('.control-label').text();

            var template_params = {
                header: modal_header,
                content: specific_template(ctrl_params),
                type: ctrl_type,
                forCtrl: ctrl_id,
                displayNom: ctrl_type == 'text' || ctrl_type == 'date' ? 'none' : 'block'
            }

            // Pass the parameters - along with the specific template content to the Base template
            var s = templates.common(template_params) + "";

            $("[name=customization_modal]").remove();
            // Making sure that we just have one instance of the modal opened and not leaking
            var b = $('<div id="modal1" name="customization_modal" class="modal" />');
            b.append(s);

            $("body").append(b);

            b.openModal();
            setTimeout(function () {
                // For some error in the code  modal show event is not firing - applying a manual delay before load
                load_values.common(ctrl_type, ctrl_id);
            },
                300);
        }

        var global = null;

        function checkLength(o, n, min, max) {
            if (o.val().length > max || o.val().length < min) {
                o.addClass("ui-state-error");
                updateTips("Length of " +
                    n +
                    " must be between " +
                    min +
                    " and " +
                    max +
                    ".");
                return false;
            } else {
                return true;
            }
        }

        function checkRegexp(o, regexp, n) {
            if (!(regexp.test(o.val()))) {
                o.addClass("ui-state-error");
                updateTips(n);
                return false;
            } else {
                return true;
            }
        }

        function doSubmit() {
            var radios = [];
            var texts = [];
            var checkboxs = [];

            $("#selected-content :input")
                .each(function () {
                    var input = $(this);
                    if (input.attr("name") != "undefined" && input.attr("type") != "undefined") {
                        if (input.attr("type") == "checkbox") {
                            checkboxs.push(input.attr("name"));
                        }
                        if (input.attr("type") == "radio") {
                            radios.push(input.attr("name"));
                        }
                        if (input.attr("type") == "text") {
                            texts.push(input.attr("name"));
                        }
                    }
                });

            var fields = { "radio": $.unique(radios), "checkox": $.unique(checkboxs), "text": $.unique(texts) };

            $.ajax({
                type: "POST",
                url: "@Url.Action("AddJobFields", "FormCustomization")",
                data: JSON.stringify(fields),
                success: function (response) {
                    alert(response);
                },
                error: function (response) {
                    alert("error: " + response);
                },
                async: false
            });
            console.log(fields);
        }


</script>

<div class="section">
    <div class="row">
        <div class="col m3">
            <div class="card-panel">
                <h4 class="header2">Available Fields</h4>

                <div class='selectorField draggableField'>
                    <div class="textbox well well-mini">
                        <b></b> Texte Simple
                    </div>
                    <div class='modele'>
                        <label class="control-label">Texte</label>
                        <input type="text" placeholder="Votre texte ici..." class="ctrl-textbox" />
                        <input type="hidden" class="hiddenObligatoire" />
                    </div>
                </div>

                <div class='selectorField draggableField'>
                    <div class="radiogroup well well-mini">
                        <b></b> Liste de choix
                    </div>
                    <div class='modele'>
                        <label class="control-label" style="vertical-align: top">Liste de choix</label>
                        <div style="display: inline-block;" class="ctrl-radiogroup">
                            <span style="display: block;"><input type="radio" name="radioField" value="option1" id="test1" /><label for="test1">Option 1</label></span>
                            <span style="display: block;"><input type="radio" name="radioField" value="option1" id="test2" /><label for="test1">Option 2</label></span>
                            <span style="display: block;"><input type="radio" name="radioField" value="option1" id="test3" /><label for="test1">Option 3</label></span>
                        </div>
                        <input type="hidden" class="hiddenObligatoire" />
                    </div>
                </div>

                <div class='selectorField draggableField'>
                    <div class="checkboxgroup well well-mini">
                        <b></b> Choix multiple
                    </div>
                    <div class='modele'>
                        <label class="control-label" style="vertical-align: top">Choix multiple</label>
                        <div style="display: inline-block;" class="ctrl-checkboxgroup">
                            <span style="display: block;"><input type="checkbox" name="checkboxField" value="option1" id="chk1" /><label for="test1">Option 1</label></span>
                            <span style="display: block;"><input type="checkbox" name="checkboxField" value="option2" id="chk2" /><label for="test1">Option 2</label></span>
                            <span style="display: block;"><input type="checkbox" name="checkboxField" value="option3" id="chk2" /><label for="test1">Option 3</label></span>
                        </div>
                        <input type="hidden" class="hiddenObligatoire" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col m9">
            <div class="card-panel" id="selected-content" style="overflow-y: scroll; height:400px;">
                <div class="span6 well droppedFields" style="min-height: 175px; ">
                    <table id="data-table-simple" class="responsive-table display" cellspacing="0">
                        <thead>
                            <tr>
                                <th>
                                    Model Job
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.JobField)
                            {
                                <tr>
                                    <td>
                                        <label class="control-label">
                                            @Html.DisplayFor(modelItem => item.fieldName)
                                        </label>


                                        @if (item.fieldType == 0)
                                        {
                                            <div class="droppedField custom" id="CTRL-DIV-@item.id">
                                                <input type="text" placeholder="Votre texte ici..." class="ctrl-textbox" onlick="attach()"/>
                                                <input type="hidden" class="hiddenObligatoire" />
                                            </div>
                                        }
                                        else if (item.fieldType == 1)
                                        {
                                            <div class="droppedField custom" id="CTRL-DIV-@item.id">
                                                <input type="radio" name="radioField" value="option1" id="test1" class="ctrl-radiogroup"/><label for="test1">Option 1</label>
                                            </div>
                                        }
                                        else if (item.fieldType == 2)
                                        {
                                            <div class="droppedField custom" id="CTRL-DIV-@item.id">
                                                <input type="checkbox" name="checkboxField" value="option1" id="chk1" class="ctrl-checkboxgroup"/><label for="test1">Option 1</label>
                                            </div>
                                                }
</td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

        </div>

        <button type="submit" class="btn waves-effect waves-light right" onclick="doSubmit();">Submit</button>
    </div>
</div>
<script id="control-customize-template" type="text/x-handlebars-template">

    <div class="modal-content">
        <form id="theForm" class="form-horizontal">
            <input type="hidden" value="{{type}}" name="type" />
            <input type="hidden" value="{{forCtrl}}" name="forCtrl" />
            <p id="pLibelle">
                <label class="control-label" for="handlebars-textbox-label">Libell&eacute;</label>
                <input type="text" name="label" value="" id="handlebars-textbox-label" />
            </p>
            <p style="display:{{displayNom}}">
                <label class="control-label" for="handlebars-textbox-name">Nom</label>
                <input type="text" value="" name="name" id="handlebars-textbox-name" />
            </p>
            <p id="pObligatoire">
                <input type="checkbox" id="checkbox-obligatoire-textbox" />
                <label for="checkbox-obligatoire-textbox">Obligatoire</label>
            </p>


            {{{content}}}
        </form>
    </div>
    <div class="modal-footer">
        <button class="btn btn-primary" data-dismiss="modal" onclick='save_customize_changes()'>Sauvegarder</button>
        <button class="btn" data-dismiss="modal" aria-hidden="true" onclick="closeModal()">Fermer</button>
        <button class="btn btn-danger" data-dismiss="modal" aria-hidden="true" onclick='delete_ctrl()'>Supprimer</button>
    </div>

</script>

<script id="textbox-template" type="text/x-handlebars-template">
    <p><label class="control-label">Placeholder</label> <input type="text" name="placeholder" value="" /></p>
</script>

<script id="combobox-template" type="text/x-handlebars-template">
    <p><label class="control-label">Options</label> <textarea name="options" rows="5"></textarea></p>
</script>

<script id="text-template" type="text/x-handlebars-template">
    <p><label class="control-label" for="handlebars-textbox-text">Texte</label> <textarea name="texte" rows="10" id="handlebars-textbox-text"></textarea></p>
</script>

<script id="date-template" type="text/x-handlebars-template">
    <p>
        <label class="control-label" for="handlebars-textbox-formatdate" style="padding-top:16px;">Format</label>
        <select name="dateformat" id="handlebars-textbox-formatdate">
            <option value="DD/MM/YYYY">DD/MM/YYYY</option>
            <option value="DD/MM/YYYY hh:mm:ss">DD/MM/YYYY hh:mm:ss</option>
        </select>
    </p>
</script>

<!-- End of templates -->

<div id="dialog-form-nombre-colonne" class="modal hide fade" style="display: none;">
    <div class="modal-header">
        <a class="close" data-dismiss="modal">x</a>
        <h3>Cr&eacute;ation Tableau</h3>
    </div>
    <div class="modal-body" style="padding: 10px 40px 0 40px; min-height: 150px;">
        <form>
            <label for="nbColonne">Nombre de colonnes : <span id="nbColonne">1</span></label>
            <div id="sliderNbColonne"></div>
        </form>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn btn-success" onclick='ajouterTableau();'>Ajouter Tableau</a>
        <a href="#" class="btn" data-dismiss="modal">Fermer</a>
    </div>
</div>

<span style="position: absolute; padding-right: 6px; height: 10px;" id="divDeleteTableau">
    <a href="#" onclick="supprimerTableau()">
</span>


@section Scripts{
    <script src="~/Scripts/jquery-ui.min.js"></script>
    <script src="~/Scripts/handlebars.js"></script>
    <script>
        $(document).ready(docReady);

        $(document).ready(function (){
            $(".custom").click(function(){
                var me = $(this)
                var ctrl = me.find("[class*=ctrl]")[0];
                var ctrl_type = $.trim(ctrl.className.match("ctrl-.*")[0].split(" ")[0].split("-")[1]);
                customize_ctrl(ctrl_type, this.id);
            });
        });
        
    </script>
}
